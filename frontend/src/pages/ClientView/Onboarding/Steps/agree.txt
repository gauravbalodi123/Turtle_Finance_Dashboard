import React, { useState, useEffect } from "react";
// import logo from "@assets/images/logo_png.png";
import useDigio from "../../useDigio";
import axios from "axios";
import { BsFileEarmarkText, BsPen } from "react-icons/bs";

const url = import.meta.env.VITE_URL;

const AgreementSigning = ({ onNext, onPrev }) => {
  const [loadingSign, setLoadingSign] = useState(false);
  const [errorSign, setErrorSign] = useState(null);
  const [successSign, setSuccessSign] = useState(false);
  const digioLoaded = useDigio();

  const [checkingDigioResponse, setCheckingDigioResponse] = useState(true);
  const [digioValid, setDigioValid] = useState(false);

  const digioEnvironment = import.meta.env.MODE === "production" ? "production" : "sandbox";

  useEffect(() => {
    const checkDigioResponse = async () => {
      try {
        setCheckingDigioResponse(true);
        const token = localStorage.getItem("token");
        const response = await axios.get(`${url}/client/digioResponse`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (response.status === 200) {
          setDigioValid(true);
          setErrorSign(null);
          onNext(); // ‚úÖ already signed ‚Üí skip ahead
        }
      } catch (error) {
        if (error.response && (error.response.status === 403 || error.response.status === 404)) {
          setDigioValid(false);
          setErrorSign(error.response.data.msg || "Please prepare the agreement contract.");
        } else {
          setErrorSign("Failed to verify agreement signing status.");
        }
      } finally {
        setCheckingDigioResponse(false);
      }
    };

    checkDigioResponse();
  }, []);

  useEffect(() => {
    console.log(">>> Vite mode:", import.meta.env.MODE);
    console.log(">>> Digio environment:", digioEnvironment);
    console.log(">>> VITE_URL:", import.meta.env.VITE_URL);
  }, []);

  const handlePrepareContract = async (e) => {
    e.preventDefault();
    console.log("üü¢ [handlePrepareContract] User clicked Generate Agreement");

    setLoadingSign(true);
    setErrorSign(null);
    setSuccessSign(false);

    if (!digioLoaded) {
      console.error("‚ö†Ô∏è Digio SDK not loaded yet");
      setErrorSign("Digio service is still loading. Please try again.");
      setLoadingSign(false);
      return;
    }

    try {
      console.log("üü° Preparing Digio options...");
      const digioOptions = {
        environment: digioEnvironment,
        callback: async (digioResponse) => {
          console.log("üì© Digio callback triggered:", digioResponse);

          if (digioResponse.hasOwnProperty("error_code")) {
            console.error("‚ùå Digio signing error:", digioResponse);
            setErrorSign("Error during signing.");
          } else {
            try {
              console.log("üì° Sending Digio response to backend...");
              await axios.post(`${url}/client/save-digio-response`, digioResponse, {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              });
              console.log("‚úÖ Digio response saved successfully");
              setSuccessSign(true);
              onNext();
            } catch (err) {
              console.error("‚ùå Failed to save Digio response:", err);
              setErrorSign("Signed but failed to save response.");
            }
          }
        },
        logo: "https://www.jockey.in/cdn/shop/files/Jockey_logo.webp?width=666",
        is_redirection_approach: false,
        theme: {
          primaryColor: "#5A2989",
          secondaryColor: "#669698",
          fontFamily: "Barlow",
          fontUrl: "https://fonts.googleapis.com/css?family=Barlow",
        },
      };

      console.log("üì° Calling backend:", `${url}/client/upload-document`);
      const response = await axios.post(`${url}/client/upload-document`, {}, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      console.log("‚úÖ /upload-document response:", response.data);

      if (response.data) {
        const digio = new window.Digio(digioOptions);
        digio.init();
        console.log("üü¢ Digio SDK initialized");

        const identifier = response.data.signing_parties?.[0]?.identifier;
        const digioDocumentId = response.data.id;
        console.log("üìÑ Digio Document ID:", digioDocumentId);
        console.log("üë§ Signing party identifier:", identifier);

        digio.submit(digioDocumentId, identifier);
        console.log("üöÄ Digio submit triggered");
      }
    } catch (err) {
      console.error("‚ùå Error in handlePrepareContract:", err);
      setErrorSign(err.response?.data?.error || "An error occurred while generating the contract.");
    } finally {
      setLoadingSign(false);
      console.log("üîµ Finished handlePrepareContract");
    }
  };


  return (
    <div className=" bg-white d-flex flex-column justify-content-center align-items-center ">
      <div className="w-50" >
        <div className="bg-white rounded-3 shadow-sm border p-4 text-center">


          <div className="text-success fs-1 ">
            <BsFileEarmarkText />
          </div>

          <h4 className="fw-bold mb-3 text-dark d-flex justify-content-center align-items-center gap-2">
            <BsPen className="text-success" />
            Advisory Agreement
          </h4>

          <p className="text-muted mb-4">

            Click the button below to generate and sign the advisory agreement. The agreement will open for E-sign in a separate window and you will be auto re-directed to the next step once the agreement is signed.
          </p>

          <button
            onClick={handlePrepareContract}
            className="btn btn-success px-4 py-2 fs-6 fw-semibold"
            disabled={loadingSign}
          >
            {loadingSign ? "Generating..." : (
              <>
                <BsPen className="me-2 mb-1" />
                Generate Agreement for E-Sign
              </>
            )}
          </button>

          {/* {errorSign && <div className="text-danger mt-3">{errorSign}</div>} */}
          <strong className=" d-block text-danger mt-3" style={{ fontSize: "14px" }}>
            In the authentication popup, please use the "send code to email" option instead of Google Sign in.
            The OTP required for signing the agreement will be shared via email. <br />

          </strong>

          {successSign && <div className="text-success mt-3">Agreement signed successfully!</div>}
        </div>
      </div>
    </div>
  );
};

export default AgreementSigning;
